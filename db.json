{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/donate.jpg","path":"img/donate.jpg","modified":1,"renderable":0},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"source/CNAME","hash":"8eec48092394fb6310994d9751b776bcc0047b2d","modified":1565182602800},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1565182602800},{"_id":"themes/aircloud/readme-en.md","hash":"2903b1e9db12cd72ed6f8c10be14cd7f6afd82cf","modified":1565182602800},{"_id":"themes/aircloud/readme.md","hash":"4be1fc64bd1dc335a986a39594564e89bd7eba43","modified":1565182602800},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"source/_posts/I2C协议标准简介.md","hash":"80fd9a04f06ff91ca10b614f7705200a5c7b5a16","modified":1565182602800},{"_id":"source/_posts/Linux-mint创建应用程序菜单.md","hash":"a3ee6027e9a787eb90bfee562d5e48cb2b6a0da3","modified":1565182602800},{"_id":"source/_posts/Linux下使用hexo-vscode-markdown编写博客.md","hash":"7cda2f7a478a4982a1f0bf775810da33df10153e","modified":1565265295562},{"_id":"source/_posts/Ubuntu18-i3配置.md","hash":"b7d9272a9ba2237b93fff6c9aa2015cced683fbe","modified":1565182602800},{"_id":"source/about/index.md","hash":"42292332798708e424b4dc3bd271fba662f96d3f","modified":1565182602800},{"_id":"source/img/avatar.jpg","hash":"fe01568140300f0e2a3fa6b9cd955cf3f13ff73d","modified":1565182602800},{"_id":"source/img/favicon.ico","hash":"54feb32a7b5ee3fc28d4382c008290abc9843500","modified":1565182602800},{"_id":"source/tags/index.md","hash":"77b914be60deb959b592786410ff3b6aed1b1ca5","modified":1565182602800},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1565182602800},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1565182602800},{"_id":"themes/aircloud/layout/archive.ejs","hash":"0f8a062f4f2f0648b23bd8c4a21945a6ca60dc1f","modified":1565182602800},{"_id":"themes/aircloud/layout/index.ejs","hash":"09e2407d615be7fe7ac41d11df3b7026e7393080","modified":1565182602800},{"_id":"themes/aircloud/layout/layout.ejs","hash":"7efd113aee90e698e187d0ea1f0b42a1c00d210e","modified":1565182602800},{"_id":"themes/aircloud/layout/post.ejs","hash":"2eb5fc0c2bb801528c3db3b09e6cb4d073e3ad99","modified":1565182602800},{"_id":"themes/aircloud/layout/tags.ejs","hash":"1a174d9213d25d9bf6ef28aabdaea6661cdd88c8","modified":1565182602800},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1565182602800},{"_id":"themes/aircloud/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1565182602800},{"_id":"source/img/donate.jpg","hash":"d2df99bf84b886c5e4df59510c72050c178f4876","modified":1565182602800},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1565182602800},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1565182602800},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"33db88f1b03548c5181c04d44387dc68a9c4cdf6","modified":1565182602800},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1565182602800},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"079fa72aa7a02ee11f6a44a8a9e58eb80fe28190","modified":1565182602800},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1565182602800},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"e6082557a5f0e546169ab1aa0ba29bda4ef5c182","modified":1565182602800},{"_id":"themes/aircloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1565182602800},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1565182602800},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1565182602800},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1565182602800},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1565182602800},{"_id":"themes/aircloud/source/_less/common.css","hash":"64914aa6ecd5b948676870e0809e0f220b162e3b","modified":1565182602800},{"_id":"themes/aircloud/source/_less/common.less","hash":"8aef4d8cfdefbcd2e28d4985a4f79a5005ca0b6c","modified":1565182602800},{"_id":"themes/aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1565182602800},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1565182602800},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1565182602800},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1565182602800},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1565182602800},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1565182602800},{"_id":"themes/aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1565182602800},{"_id":"themes/aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1565182602800},{"_id":"themes/aircloud/source/_less/layout.css","hash":"40d7cadf42b130ea1b40de1ae73b2b00e27f476f","modified":1565182602800},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1565182602800},{"_id":"themes/aircloud/source/_less/nav.css","hash":"32e352d71dc2e67d69a26d8b5116a27d8d2a7718","modified":1565182602800},{"_id":"themes/aircloud/source/_less/nav.less","hash":"627e33cafb4ca9c191053b10917fc21c68c6ee8c","modified":1565182602800},{"_id":"themes/aircloud/source/_less/post.css","hash":"4adf531589cb55413264c188b29ae47ab703beb8","modified":1565182602800},{"_id":"themes/aircloud/source/_less/post.less","hash":"bbbd81c03e7581950d82bf971eda49e8bed7bee1","modified":1565182602800},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1565182602800},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1565182602800},{"_id":"themes/aircloud/source/_less/toc.css","hash":"83b1a219e7fe66d9d6cc34600e5a16311381a883","modified":1565182602800},{"_id":"themes/aircloud/source/_less/toc.less","hash":"c873ce552b22b0aa2c51a386a91516cadf9160ba","modified":1565182602800},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1565182602800},{"_id":"themes/aircloud/source/_less/variables.less","hash":"49503f7a6c51edd6f1dbdea5345df6bb903b18a5","modified":1565182602800},{"_id":"themes/aircloud/source/js/index.js","hash":"1fed4485eedf5309e504aec35596955e5d692c7d","modified":1565182602800},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e00d722211b4695449d72850340ac0dd701d6ede","modified":1565182602800},{"_id":"themes/aircloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1565182602800},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"d1469f97daf750f3e4be18c4d640772780c32a75","modified":1565182602800},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1565182602800},{"_id":"public/search.json","hash":"01e448b7e1a3690747f9ae4b5d8997271fdb3b50","modified":1565265326908},{"_id":"public/sitemap.xml","hash":"aa3784c8d2d2afcef41b029257bc0103cd0335a6","modified":1565265326940},{"_id":"public/baidusitemap.xml","hash":"7aba58dea3b195ef474731f32e83a96a53441b8e","modified":1565265327024},{"_id":"public/about/index.html","hash":"ee5760882a42a679bc9c7810a1d69c3cb972ffb0","modified":1565265327061},{"_id":"public/tags/index.html","hash":"9dadf3c69e00ebe041718a5ddc86466f51103ab2","modified":1565265327061},{"_id":"public/I2C协议标准简介.html","hash":"3f45be185349b4438fba1b85a207a7d9ca894c91","modified":1565265327061},{"_id":"public/Linux-mint创建应用程序菜单.html","hash":"32ab1f7926bfe0eee79c903120860de8d62f59a1","modified":1565265327061},{"_id":"public/Ubuntu18-i3配置.html","hash":"7e2b6688290ef5292b56d958f7e9852d078cb0b9","modified":1565265327061},{"_id":"public/archives/index.html","hash":"21a4c4bef988a660865a25b5e1b62bb4fcc7264e","modified":1565265327061},{"_id":"public/archives/2019/index.html","hash":"21a4c4bef988a660865a25b5e1b62bb4fcc7264e","modified":1565265327061},{"_id":"public/archives/2019/07/index.html","hash":"21a4c4bef988a660865a25b5e1b62bb4fcc7264e","modified":1565265327061},{"_id":"public/archives/2019/08/index.html","hash":"21a4c4bef988a660865a25b5e1b62bb4fcc7264e","modified":1565265327061},{"_id":"public/index.html","hash":"f4142bc4185895057cd6764d2a96f7c5245f1919","modified":1565265327061},{"_id":"public/tags/电子/index.html","hash":"72efb08178697895c600a86e385310b82586bdd7","modified":1565265327061},{"_id":"public/tags/linux/index.html","hash":"72efb08178697895c600a86e385310b82586bdd7","modified":1565265327062},{"_id":"public/Linux下使用hexo-vscode-markdown编写博客.html","hash":"35b47572ca9dedac9a9bd2fccdcdee3881326716","modified":1565265327062},{"_id":"public/CNAME","hash":"8eec48092394fb6310994d9751b776bcc0047b2d","modified":1565265327063},{"_id":"public/img/favicon.ico","hash":"54feb32a7b5ee3fc28d4382c008290abc9843500","modified":1565265327063},{"_id":"public/img/avatar.jpg","hash":"fe01568140300f0e2a3fa6b9cd955cf3f13ff73d","modified":1565265327063},{"_id":"public/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1565265327063},{"_id":"public/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1565265327063},{"_id":"public/js/index.js","hash":"1fed4485eedf5309e504aec35596955e5d692c7d","modified":1565265327066},{"_id":"public/css/aircloud.css","hash":"e6082557a5f0e546169ab1aa0ba29bda4ef5c182","modified":1565265327066},{"_id":"public/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1565265327066},{"_id":"public/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1565265327066},{"_id":"public/img/donate.jpg","hash":"d2df99bf84b886c5e4df59510c72050c178f4876","modified":1565265327067}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","date":"2019-07-23T11:25:33.000Z","comments":1,"_content":"\n    生命不息，折腾不止。\n\nMail: pi_sender@163.com\n\n因为我想要一个博客，所以就有了这个博客，这个博客将作为我不停折腾的一个记录。","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2019-07-23 19:25:33\ncomments: true\n---\n\n    生命不息，折腾不止。\n\nMail: pi_sender@163.com\n\n因为我想要一个博客，所以就有了这个博客，这个博客将作为我不停折腾的一个记录。","updated":"2019-08-07T12:56:42.800Z","path":"about/index.html","_id":"cjz2mk7sa00017t3qudffqvoy","content":"<pre><code>生命不息，折腾不止。\n</code></pre><p>Mail: pi_sender@163.com</p>\n<p>因为我想要一个博客，所以就有了这个博客，这个博客将作为我不停折腾的一个记录。</p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>生命不息，折腾不止。\n</code></pre><p>Mail: pi_sender@163.com</p>\n<p>因为我想要一个博客，所以就有了这个博客，这个博客将作为我不停折腾的一个记录。</p>\n"},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---","date":"2019-08-07T12:56:42.800Z","updated":"2019-08-07T12:56:42.800Z","path":"tags/index.html","comments":1,"_id":"cjz2mk7sk000d7t3qq46ae9ay","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"I2C协议标准简介","date":"2019-08-06T11:49:57.000Z","_content":"\n### I2C总线概念\n\nI2C总线是由一根SCL和一根SDA组成,每根总线都接到一个上拉电阻,所以总线空闲状态下都为高电平.所有的器件都并联在总线上,所以只要当其中一个器件输出低电平,总线就会表现为低电平.\n\n同一个总线上,允许存在一个或多个主机,总线通常由主机控制,当有两个以上主机同时尝试控制总线,就会执行仲裁,赢得仲裁的主机,将获得总线的控制权.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_51_24.png)\n\n|术语|描述|\n|---|---|\n|发送器|发送数据到总线的器件 |\n|接收器|从总线接收数据的器件 |\n|主机|初始化发送 产生时钟信号和终止发送的器件|\n|从机|被主机寻址的器件 |\n|多主机|同时有多于一个主机尝试控制总线 但不破坏报文|\n|仲裁|是一个在有多个主机同时尝试控制总线 但只允许其中一个控制总线并使报文不被破坏 的过程|\n|同步|两个或多个器件同步时钟信号的过程|\n\n> 注意: 发送器不等于主机,接收器也不等于从机.发送器和接收器仅由数据传送的方向决定\n\n### 数据传输\n\n#### 起始条件和停止条件\n\n起始条件: 当SCL线高电平时, SDA线由高电平向低电平切换,开始数据传输.\n停止条件: 当SCL线低电平时,SDA线由低电平向高电平切换,停止数据传输.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_02.png)\n\n#### 数据有效性\n\nSDA线上的数据必须在时钟的高电平周期保持稳定,在SCL的低电平周期,才允许发生改变.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_18.png)\n\n#### 字节格式\n\n发送到SDA上的每个字节必须是8位,每次传输可以发送的字节数量不受限制,每个字节后必须跟一个响应位,首先传输的是数据的高位.\n\n#### 响应\n\n数据传输必须带响应,相关的响应时钟脉冲由主机产生,在响应的时钟脉冲期间,发送器释放 SDA 线.在响应的时钟脉冲期间,接收器必须将SDA线拉低,使它在这个时钟脉冲的高电平期间保持稳定的低电平.\n\n在数据传输过程中,如果从机要完成一些功能后(比如执行一个内部中断程序),才能发送或接收下一个字节,可以主动将SCL线拉低,迫使主机进入等待状态,当从机准备好之后,即可释放SCL线,数据传输继续.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_48.png)\n\n### 仲裁和时钟同步\n\n主机只能在总线空闲的时侯启动传输,两个或多个主机可能在起始条件的小持续时间 tHD;STA内产生一个起始条件.这样,多个主机就要执行仲裁,赢得仲裁的主机,将获得总线的控制权.\n\n多个主机的时钟频率可能会不同,这种情况下是没有办法执行仲裁的,所以在仲裁的同时需要进行时钟同步.\n\n#### 时钟同步\n\n所有主机在SCL线上产生它们自己的时钟来传输I2C总线上的报文 数据只在时钟的高电平周期有效.因此,需要一个确定的时钟进行逐位仲裁.\n\n时钟同步通过线与连接 I2C 接口到 SCL 线来执行,这就是说 SCL 线的高到低切换会使器件开始数它们的低电平周期,而且一旦器件的时钟变低电平,它会使 SCL 线保持这种状态直到到达时钟的高电平.但是如果另一个时钟仍处于低电平周期,这个时钟的低到高切换不会改变 SCL 线的状态,因此 SCL 线被有长低电平周期的器件保持低电平,此时低电平周期短的器件会进入高电平的等待状态.\n\n当所有有关的器件数完了它们的低电平周期后,时钟线被释放并变成高电平,之后器件时钟和 SCL 线的状态没有差别,而且所有器件会开始数它们的高电平周期,首先完成高电平周期的器件会再次将 SCL 线拉低.\n\n这样,产生的同步 SCL 时钟的低电平周期由低电平时钟周期长的器件决定,而高电平周期由高电平时钟周期短的器件决定.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_07.png)\n \n#### 仲裁\n\n时钟同步后,当SCL位高电平时,仲裁在SDA线发生.当其他主机向SDA发送低电平时,发送高电平的主机将丢失仲裁,因为它发现总线上的电平与自己的电平不同.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_23.png)\n\n如图所示,两个主机DATA1和DATA2同时尝试控制总线,在第一和第二个时钟周期,两个主机向SDA发送了相同的位数据,但是在第三个时钟周期,DATA1发送了高电平,DATA2发送了低电平.但是因为此时总线上表现出来的为低电平,所以发送高电平的主机DATA1丢失了仲裁.从图上可以看到,这种仲裁方式并不会破坏数据.\n\n> 更多详细信息请查看I2C协议标准官方文档","source":"_posts/I2C协议标准简介.md","raw":"---\ntitle: I2C协议标准简介\ndate: 2019-08-06 19:49:57\ntags: 电子\n---\n\n### I2C总线概念\n\nI2C总线是由一根SCL和一根SDA组成,每根总线都接到一个上拉电阻,所以总线空闲状态下都为高电平.所有的器件都并联在总线上,所以只要当其中一个器件输出低电平,总线就会表现为低电平.\n\n同一个总线上,允许存在一个或多个主机,总线通常由主机控制,当有两个以上主机同时尝试控制总线,就会执行仲裁,赢得仲裁的主机,将获得总线的控制权.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_51_24.png)\n\n|术语|描述|\n|---|---|\n|发送器|发送数据到总线的器件 |\n|接收器|从总线接收数据的器件 |\n|主机|初始化发送 产生时钟信号和终止发送的器件|\n|从机|被主机寻址的器件 |\n|多主机|同时有多于一个主机尝试控制总线 但不破坏报文|\n|仲裁|是一个在有多个主机同时尝试控制总线 但只允许其中一个控制总线并使报文不被破坏 的过程|\n|同步|两个或多个器件同步时钟信号的过程|\n\n> 注意: 发送器不等于主机,接收器也不等于从机.发送器和接收器仅由数据传送的方向决定\n\n### 数据传输\n\n#### 起始条件和停止条件\n\n起始条件: 当SCL线高电平时, SDA线由高电平向低电平切换,开始数据传输.\n停止条件: 当SCL线低电平时,SDA线由低电平向高电平切换,停止数据传输.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_02.png)\n\n#### 数据有效性\n\nSDA线上的数据必须在时钟的高电平周期保持稳定,在SCL的低电平周期,才允许发生改变.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_18.png)\n\n#### 字节格式\n\n发送到SDA上的每个字节必须是8位,每次传输可以发送的字节数量不受限制,每个字节后必须跟一个响应位,首先传输的是数据的高位.\n\n#### 响应\n\n数据传输必须带响应,相关的响应时钟脉冲由主机产生,在响应的时钟脉冲期间,发送器释放 SDA 线.在响应的时钟脉冲期间,接收器必须将SDA线拉低,使它在这个时钟脉冲的高电平期间保持稳定的低电平.\n\n在数据传输过程中,如果从机要完成一些功能后(比如执行一个内部中断程序),才能发送或接收下一个字节,可以主动将SCL线拉低,迫使主机进入等待状态,当从机准备好之后,即可释放SCL线,数据传输继续.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_48.png)\n\n### 仲裁和时钟同步\n\n主机只能在总线空闲的时侯启动传输,两个或多个主机可能在起始条件的小持续时间 tHD;STA内产生一个起始条件.这样,多个主机就要执行仲裁,赢得仲裁的主机,将获得总线的控制权.\n\n多个主机的时钟频率可能会不同,这种情况下是没有办法执行仲裁的,所以在仲裁的同时需要进行时钟同步.\n\n#### 时钟同步\n\n所有主机在SCL线上产生它们自己的时钟来传输I2C总线上的报文 数据只在时钟的高电平周期有效.因此,需要一个确定的时钟进行逐位仲裁.\n\n时钟同步通过线与连接 I2C 接口到 SCL 线来执行,这就是说 SCL 线的高到低切换会使器件开始数它们的低电平周期,而且一旦器件的时钟变低电平,它会使 SCL 线保持这种状态直到到达时钟的高电平.但是如果另一个时钟仍处于低电平周期,这个时钟的低到高切换不会改变 SCL 线的状态,因此 SCL 线被有长低电平周期的器件保持低电平,此时低电平周期短的器件会进入高电平的等待状态.\n\n当所有有关的器件数完了它们的低电平周期后,时钟线被释放并变成高电平,之后器件时钟和 SCL 线的状态没有差别,而且所有器件会开始数它们的高电平周期,首先完成高电平周期的器件会再次将 SCL 线拉低.\n\n这样,产生的同步 SCL 时钟的低电平周期由低电平时钟周期长的器件决定,而高电平周期由高电平时钟周期短的器件决定.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_07.png)\n \n#### 仲裁\n\n时钟同步后,当SCL位高电平时,仲裁在SDA线发生.当其他主机向SDA发送低电平时,发送高电平的主机将丢失仲裁,因为它发现总线上的电平与自己的电平不同.\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_23.png)\n\n如图所示,两个主机DATA1和DATA2同时尝试控制总线,在第一和第二个时钟周期,两个主机向SDA发送了相同的位数据,但是在第三个时钟周期,DATA1发送了高电平,DATA2发送了低电平.但是因为此时总线上表现出来的为低电平,所以发送高电平的主机DATA1丢失了仲裁.从图上可以看到,这种仲裁方式并不会破坏数据.\n\n> 更多详细信息请查看I2C协议标准官方文档","slug":"I2C协议标准简介","published":1,"updated":"2019-08-07T12:56:42.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz2mk7s600007t3qkooarrme","content":"<h3 id=\"I2C总线概念\"><a href=\"#I2C总线概念\" class=\"headerlink\" title=\"I2C总线概念\"></a>I2C总线概念</h3><p>I2C总线是由一根SCL和一根SDA组成,每根总线都接到一个上拉电阻,所以总线空闲状态下都为高电平.所有的器件都并联在总线上,所以只要当其中一个器件输出低电平,总线就会表现为低电平.</p>\n<p>同一个总线上,允许存在一个或多个主机,总线通常由主机控制,当有两个以上主机同时尝试控制总线,就会执行仲裁,赢得仲裁的主机,将获得总线的控制权.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_51_24.png\" alt></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发送器</td>\n<td>发送数据到总线的器件</td>\n</tr>\n<tr>\n<td>接收器</td>\n<td>从总线接收数据的器件</td>\n</tr>\n<tr>\n<td>主机</td>\n<td>初始化发送 产生时钟信号和终止发送的器件</td>\n</tr>\n<tr>\n<td>从机</td>\n<td>被主机寻址的器件</td>\n</tr>\n<tr>\n<td>多主机</td>\n<td>同时有多于一个主机尝试控制总线 但不破坏报文</td>\n</tr>\n<tr>\n<td>仲裁</td>\n<td>是一个在有多个主机同时尝试控制总线 但只允许其中一个控制总线并使报文不被破坏 的过程</td>\n</tr>\n<tr>\n<td>同步</td>\n<td>两个或多个器件同步时钟信号的过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>注意: 发送器不等于主机,接收器也不等于从机.发送器和接收器仅由数据传送的方向决定</p>\n</blockquote>\n<h3 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h3><h4 id=\"起始条件和停止条件\"><a href=\"#起始条件和停止条件\" class=\"headerlink\" title=\"起始条件和停止条件\"></a>起始条件和停止条件</h4><p>起始条件: 当SCL线高电平时, SDA线由高电平向低电平切换,开始数据传输.<br>停止条件: 当SCL线低电平时,SDA线由低电平向高电平切换,停止数据传输.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_02.png\" alt></p>\n<h4 id=\"数据有效性\"><a href=\"#数据有效性\" class=\"headerlink\" title=\"数据有效性\"></a>数据有效性</h4><p>SDA线上的数据必须在时钟的高电平周期保持稳定,在SCL的低电平周期,才允许发生改变.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_18.png\" alt></p>\n<h4 id=\"字节格式\"><a href=\"#字节格式\" class=\"headerlink\" title=\"字节格式\"></a>字节格式</h4><p>发送到SDA上的每个字节必须是8位,每次传输可以发送的字节数量不受限制,每个字节后必须跟一个响应位,首先传输的是数据的高位.</p>\n<h4 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h4><p>数据传输必须带响应,相关的响应时钟脉冲由主机产生,在响应的时钟脉冲期间,发送器释放 SDA 线.在响应的时钟脉冲期间,接收器必须将SDA线拉低,使它在这个时钟脉冲的高电平期间保持稳定的低电平.</p>\n<p>在数据传输过程中,如果从机要完成一些功能后(比如执行一个内部中断程序),才能发送或接收下一个字节,可以主动将SCL线拉低,迫使主机进入等待状态,当从机准备好之后,即可释放SCL线,数据传输继续.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_48.png\" alt></p>\n<h3 id=\"仲裁和时钟同步\"><a href=\"#仲裁和时钟同步\" class=\"headerlink\" title=\"仲裁和时钟同步\"></a>仲裁和时钟同步</h3><p>主机只能在总线空闲的时侯启动传输,两个或多个主机可能在起始条件的小持续时间 tHD;STA内产生一个起始条件.这样,多个主机就要执行仲裁,赢得仲裁的主机,将获得总线的控制权.</p>\n<p>多个主机的时钟频率可能会不同,这种情况下是没有办法执行仲裁的,所以在仲裁的同时需要进行时钟同步.</p>\n<h4 id=\"时钟同步\"><a href=\"#时钟同步\" class=\"headerlink\" title=\"时钟同步\"></a>时钟同步</h4><p>所有主机在SCL线上产生它们自己的时钟来传输I2C总线上的报文 数据只在时钟的高电平周期有效.因此,需要一个确定的时钟进行逐位仲裁.</p>\n<p>时钟同步通过线与连接 I2C 接口到 SCL 线来执行,这就是说 SCL 线的高到低切换会使器件开始数它们的低电平周期,而且一旦器件的时钟变低电平,它会使 SCL 线保持这种状态直到到达时钟的高电平.但是如果另一个时钟仍处于低电平周期,这个时钟的低到高切换不会改变 SCL 线的状态,因此 SCL 线被有长低电平周期的器件保持低电平,此时低电平周期短的器件会进入高电平的等待状态.</p>\n<p>当所有有关的器件数完了它们的低电平周期后,时钟线被释放并变成高电平,之后器件时钟和 SCL 线的状态没有差别,而且所有器件会开始数它们的高电平周期,首先完成高电平周期的器件会再次将 SCL 线拉低.</p>\n<p>这样,产生的同步 SCL 时钟的低电平周期由低电平时钟周期长的器件决定,而高电平周期由高电平时钟周期短的器件决定.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_07.png\" alt></p>\n<h4 id=\"仲裁\"><a href=\"#仲裁\" class=\"headerlink\" title=\"仲裁\"></a>仲裁</h4><p>时钟同步后,当SCL位高电平时,仲裁在SDA线发生.当其他主机向SDA发送低电平时,发送高电平的主机将丢失仲裁,因为它发现总线上的电平与自己的电平不同.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_23.png\" alt></p>\n<p>如图所示,两个主机DATA1和DATA2同时尝试控制总线,在第一和第二个时钟周期,两个主机向SDA发送了相同的位数据,但是在第三个时钟周期,DATA1发送了高电平,DATA2发送了低电平.但是因为此时总线上表现出来的为低电平,所以发送高电平的主机DATA1丢失了仲裁.从图上可以看到,这种仲裁方式并不会破坏数据.</p>\n<blockquote>\n<p>更多详细信息请查看I2C协议标准官方文档</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"I2C总线概念\"><a href=\"#I2C总线概念\" class=\"headerlink\" title=\"I2C总线概念\"></a>I2C总线概念</h3><p>I2C总线是由一根SCL和一根SDA组成,每根总线都接到一个上拉电阻,所以总线空闲状态下都为高电平.所有的器件都并联在总线上,所以只要当其中一个器件输出低电平,总线就会表现为低电平.</p>\n<p>同一个总线上,允许存在一个或多个主机,总线通常由主机控制,当有两个以上主机同时尝试控制总线,就会执行仲裁,赢得仲裁的主机,将获得总线的控制权.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_51_24.png\" alt></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>发送器</td>\n<td>发送数据到总线的器件</td>\n</tr>\n<tr>\n<td>接收器</td>\n<td>从总线接收数据的器件</td>\n</tr>\n<tr>\n<td>主机</td>\n<td>初始化发送 产生时钟信号和终止发送的器件</td>\n</tr>\n<tr>\n<td>从机</td>\n<td>被主机寻址的器件</td>\n</tr>\n<tr>\n<td>多主机</td>\n<td>同时有多于一个主机尝试控制总线 但不破坏报文</td>\n</tr>\n<tr>\n<td>仲裁</td>\n<td>是一个在有多个主机同时尝试控制总线 但只允许其中一个控制总线并使报文不被破坏 的过程</td>\n</tr>\n<tr>\n<td>同步</td>\n<td>两个或多个器件同步时钟信号的过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>注意: 发送器不等于主机,接收器也不等于从机.发送器和接收器仅由数据传送的方向决定</p>\n</blockquote>\n<h3 id=\"数据传输\"><a href=\"#数据传输\" class=\"headerlink\" title=\"数据传输\"></a>数据传输</h3><h4 id=\"起始条件和停止条件\"><a href=\"#起始条件和停止条件\" class=\"headerlink\" title=\"起始条件和停止条件\"></a>起始条件和停止条件</h4><p>起始条件: 当SCL线高电平时, SDA线由高电平向低电平切换,开始数据传输.<br>停止条件: 当SCL线低电平时,SDA线由低电平向高电平切换,停止数据传输.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_02.png\" alt></p>\n<h4 id=\"数据有效性\"><a href=\"#数据有效性\" class=\"headerlink\" title=\"数据有效性\"></a>数据有效性</h4><p>SDA线上的数据必须在时钟的高电平周期保持稳定,在SCL的低电平周期,才允许发生改变.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_18.png\" alt></p>\n<h4 id=\"字节格式\"><a href=\"#字节格式\" class=\"headerlink\" title=\"字节格式\"></a>字节格式</h4><p>发送到SDA上的每个字节必须是8位,每次传输可以发送的字节数量不受限制,每个字节后必须跟一个响应位,首先传输的是数据的高位.</p>\n<h4 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h4><p>数据传输必须带响应,相关的响应时钟脉冲由主机产生,在响应的时钟脉冲期间,发送器释放 SDA 线.在响应的时钟脉冲期间,接收器必须将SDA线拉低,使它在这个时钟脉冲的高电平期间保持稳定的低电平.</p>\n<p>在数据传输过程中,如果从机要完成一些功能后(比如执行一个内部中断程序),才能发送或接收下一个字节,可以主动将SCL线拉低,迫使主机进入等待状态,当从机准备好之后,即可释放SCL线,数据传输继续.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_52_48.png\" alt></p>\n<h3 id=\"仲裁和时钟同步\"><a href=\"#仲裁和时钟同步\" class=\"headerlink\" title=\"仲裁和时钟同步\"></a>仲裁和时钟同步</h3><p>主机只能在总线空闲的时侯启动传输,两个或多个主机可能在起始条件的小持续时间 tHD;STA内产生一个起始条件.这样,多个主机就要执行仲裁,赢得仲裁的主机,将获得总线的控制权.</p>\n<p>多个主机的时钟频率可能会不同,这种情况下是没有办法执行仲裁的,所以在仲裁的同时需要进行时钟同步.</p>\n<h4 id=\"时钟同步\"><a href=\"#时钟同步\" class=\"headerlink\" title=\"时钟同步\"></a>时钟同步</h4><p>所有主机在SCL线上产生它们自己的时钟来传输I2C总线上的报文 数据只在时钟的高电平周期有效.因此,需要一个确定的时钟进行逐位仲裁.</p>\n<p>时钟同步通过线与连接 I2C 接口到 SCL 线来执行,这就是说 SCL 线的高到低切换会使器件开始数它们的低电平周期,而且一旦器件的时钟变低电平,它会使 SCL 线保持这种状态直到到达时钟的高电平.但是如果另一个时钟仍处于低电平周期,这个时钟的低到高切换不会改变 SCL 线的状态,因此 SCL 线被有长低电平周期的器件保持低电平,此时低电平周期短的器件会进入高电平的等待状态.</p>\n<p>当所有有关的器件数完了它们的低电平周期后,时钟线被释放并变成高电平,之后器件时钟和 SCL 线的状态没有差别,而且所有器件会开始数它们的高电平周期,首先完成高电平周期的器件会再次将 SCL 线拉低.</p>\n<p>这样,产生的同步 SCL 时钟的低电平周期由低电平时钟周期长的器件决定,而高电平周期由高电平时钟周期短的器件决定.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_07.png\" alt></p>\n<h4 id=\"仲裁\"><a href=\"#仲裁\" class=\"headerlink\" title=\"仲裁\"></a>仲裁</h4><p>时钟同步后,当SCL位高电平时,仲裁在SDA线发生.当其他主机向SDA发送低电平时,发送高电平的主机将丢失仲裁,因为它发现总线上的电平与自己的电平不同.</p>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/2019_08_06_19_53_23.png\" alt></p>\n<p>如图所示,两个主机DATA1和DATA2同时尝试控制总线,在第一和第二个时钟周期,两个主机向SDA发送了相同的位数据,但是在第三个时钟周期,DATA1发送了高电平,DATA2发送了低电平.但是因为此时总线上表现出来的为低电平,所以发送高电平的主机DATA1丢失了仲裁.从图上可以看到,这种仲裁方式并不会破坏数据.</p>\n<blockquote>\n<p>更多详细信息请查看I2C协议标准官方文档</p>\n</blockquote>\n"},{"title":"Linux mint创建应用程序菜单","date":"2019-08-03T14:03:07.000Z","_content":"\n# Linux mint创建应用程序菜单\n\n我们有很多软件可以在终端打开，但是在应用程序里面找不到，这样有时候会很不方便，所以我们需要自己创建应用程序菜单。\n\nLinux mint下在`～/.local/share/applications`目录下创建***.desktop文件，内容如下：\n\n```shell\n[Desktop Entry]\nEncoding=UTF-8\nType=Application\nTerminal=false\nExec=应用程序所在路径/android-studio/bin/studio.sh\nCategories=Application;Development;\nName=应用程序名称\nComment=\"Android Development IDE(这个其实可以省略)\"\nIcon=应用程序图标所在路径/android-studio/bin/idea.png\n```\n\n","source":"_posts/Linux-mint创建应用程序菜单.md","raw":"---\ntitle: Linux mint创建应用程序菜单\ndate: 2019-08-03 22:03:07\ntags: linux\n---\n\n# Linux mint创建应用程序菜单\n\n我们有很多软件可以在终端打开，但是在应用程序里面找不到，这样有时候会很不方便，所以我们需要自己创建应用程序菜单。\n\nLinux mint下在`～/.local/share/applications`目录下创建***.desktop文件，内容如下：\n\n```shell\n[Desktop Entry]\nEncoding=UTF-8\nType=Application\nTerminal=false\nExec=应用程序所在路径/android-studio/bin/studio.sh\nCategories=Application;Development;\nName=应用程序名称\nComment=\"Android Development IDE(这个其实可以省略)\"\nIcon=应用程序图标所在路径/android-studio/bin/idea.png\n```\n\n","slug":"Linux-mint创建应用程序菜单","published":1,"updated":"2019-08-07T12:56:42.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz2mk7sb00027t3qndqbbvfc","content":"<h1 id=\"Linux-mint创建应用程序菜单\"><a href=\"#Linux-mint创建应用程序菜单\" class=\"headerlink\" title=\"Linux mint创建应用程序菜单\"></a>Linux mint创建应用程序菜单</h1><p>我们有很多软件可以在终端打开，但是在应用程序里面找不到，这样有时候会很不方便，所以我们需要自己创建应用程序菜单。</p>\n<p>Linux mint下在<code>～/.local/share/applications</code>目录下创建<em>*</em>.desktop文件，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Terminal=false</span><br><span class=\"line\">Exec=应用程序所在路径/android-studio/bin/studio.sh</span><br><span class=\"line\">Categories=Application;Development;</span><br><span class=\"line\">Name=应用程序名称</span><br><span class=\"line\">Comment=\"Android Development IDE(这个其实可以省略)\"</span><br><span class=\"line\">Icon=应用程序图标所在路径/android-studio/bin/idea.png</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-mint创建应用程序菜单\"><a href=\"#Linux-mint创建应用程序菜单\" class=\"headerlink\" title=\"Linux mint创建应用程序菜单\"></a>Linux mint创建应用程序菜单</h1><p>我们有很多软件可以在终端打开，但是在应用程序里面找不到，这样有时候会很不方便，所以我们需要自己创建应用程序菜单。</p>\n<p>Linux mint下在<code>～/.local/share/applications</code>目录下创建<em>*</em>.desktop文件，内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Terminal=false</span><br><span class=\"line\">Exec=应用程序所在路径/android-studio/bin/studio.sh</span><br><span class=\"line\">Categories=Application;Development;</span><br><span class=\"line\">Name=应用程序名称</span><br><span class=\"line\">Comment=\"Android Development IDE(这个其实可以省略)\"</span><br><span class=\"line\">Icon=应用程序图标所在路径/android-studio/bin/idea.png</span><br></pre></td></tr></table></figure>\n"},{"title":"Ubuntu18+i3配置","date":"2019-07-23T12:00:49.000Z","_content":"\n\n\n## 安装i3\n\n```shell\nsudo apt install i3\n```\n\n## 配置i3\n\n登出账户，选择i3桌面进入\n\n第一次进入时会让你设置mod键\n\n按mod+enter打开终端\n\n```shell\n# compton用于设置透明，feh设置桌面壁纸，\nsudo apt install compton feh\n\n# Albert打开应用\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt intall albert\n\n# xfce4-volumed可以使用键盘调节音量\nsudo apt install xfce4-volumed\n\n# xfce4-power-manager可以使用键盘fn组合键调节屏幕亮度和键盘背光\nsudo apt install xfce4-power-manager\n# 如果没有生效，可以打开xfce4-power-manager-config，在里面有个绑定按键的选项，打钩就好了\n\n# touchpad-indicator可以简单地设置触控板\nsudo add-apt-repository ppa:atareao/atareao\nsudo apt update\nsudo apt install touchpad-indicator\n```\n\n打开配置文件*~/.config/i3/config*\n\n```shell\n# 设置软件自动启动\n# 每次按mod+shift+r刷新就会生效\nexec_always albert\nexec_always compton\nexec_always --no-startup-id feh --bg-scale /home/tom/Pictures/wallpaper.jpg\n# 只有每次启动桌面的时候才会开启\nexec xfce4-volumed\nexec xfce4-power-manager\nexec touchpad-indicator\n\n# 如果里面有不习惯的快捷键，可以自己设置快捷键\n# 设置自己的快捷键打开软件\nbandsym $mod+g exec google-chrome\n\n# 配置完成后重启，使所有设置生效\n```\n\n","source":"_posts/Ubuntu18-i3配置.md","raw":"---\ntitle: Ubuntu18+i3配置\ndate: 2019-07-23 20:00:49\ntags: linux\n---\n\n\n\n## 安装i3\n\n```shell\nsudo apt install i3\n```\n\n## 配置i3\n\n登出账户，选择i3桌面进入\n\n第一次进入时会让你设置mod键\n\n按mod+enter打开终端\n\n```shell\n# compton用于设置透明，feh设置桌面壁纸，\nsudo apt install compton feh\n\n# Albert打开应用\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt intall albert\n\n# xfce4-volumed可以使用键盘调节音量\nsudo apt install xfce4-volumed\n\n# xfce4-power-manager可以使用键盘fn组合键调节屏幕亮度和键盘背光\nsudo apt install xfce4-power-manager\n# 如果没有生效，可以打开xfce4-power-manager-config，在里面有个绑定按键的选项，打钩就好了\n\n# touchpad-indicator可以简单地设置触控板\nsudo add-apt-repository ppa:atareao/atareao\nsudo apt update\nsudo apt install touchpad-indicator\n```\n\n打开配置文件*~/.config/i3/config*\n\n```shell\n# 设置软件自动启动\n# 每次按mod+shift+r刷新就会生效\nexec_always albert\nexec_always compton\nexec_always --no-startup-id feh --bg-scale /home/tom/Pictures/wallpaper.jpg\n# 只有每次启动桌面的时候才会开启\nexec xfce4-volumed\nexec xfce4-power-manager\nexec touchpad-indicator\n\n# 如果里面有不习惯的快捷键，可以自己设置快捷键\n# 设置自己的快捷键打开软件\nbandsym $mod+g exec google-chrome\n\n# 配置完成后重启，使所有设置生效\n```\n\n","slug":"Ubuntu18-i3配置","published":1,"updated":"2019-08-07T12:56:42.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz2mk7sd00047t3q1ixntugj","content":"<h2 id=\"安装i3\"><a href=\"#安装i3\" class=\"headerlink\" title=\"安装i3\"></a>安装i3</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install i3</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置i3\"><a href=\"#配置i3\" class=\"headerlink\" title=\"配置i3\"></a>配置i3</h2><p>登出账户，选择i3桌面进入</p>\n<p>第一次进入时会让你设置mod键</p>\n<p>按mod+enter打开终端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> compton用于设置透明，feh设置桌面壁纸，</span><br><span class=\"line\">sudo apt install compton feh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> Albert打开应用</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt intall albert</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> xfce4-volumed可以使用键盘调节音量</span><br><span class=\"line\">sudo apt install xfce4-volumed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> xfce4-power-manager可以使用键盘fn组合键调节屏幕亮度和键盘背光</span><br><span class=\"line\">sudo apt install xfce4-power-manager</span><br><span class=\"line\"><span class=\"meta\">#</span> 如果没有生效，可以打开xfce4-power-manager-config，在里面有个绑定按键的选项，打钩就好了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> touchpad-indicator可以简单地设置触控板</span><br><span class=\"line\">sudo add-apt-repository ppa:atareao/atareao</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install touchpad-indicator</span><br></pre></td></tr></table></figure>\n<p>打开配置文件<em>~/.config/i3/config</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 设置软件自动启动</span><br><span class=\"line\"><span class=\"meta\">#</span> 每次按mod+shift+r刷新就会生效</span><br><span class=\"line\">exec_always albert</span><br><span class=\"line\">exec_always compton</span><br><span class=\"line\">exec_always --no-startup-id feh --bg-scale /home/tom/Pictures/wallpaper.jpg</span><br><span class=\"line\"><span class=\"meta\">#</span> 只有每次启动桌面的时候才会开启</span><br><span class=\"line\">exec xfce4-volumed</span><br><span class=\"line\">exec xfce4-power-manager</span><br><span class=\"line\">exec touchpad-indicator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果里面有不习惯的快捷键，可以自己设置快捷键</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置自己的快捷键打开软件</span><br><span class=\"line\">bandsym $mod+g exec google-chrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 配置完成后重启，使所有设置生效</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装i3\"><a href=\"#安装i3\" class=\"headerlink\" title=\"安装i3\"></a>安装i3</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install i3</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置i3\"><a href=\"#配置i3\" class=\"headerlink\" title=\"配置i3\"></a>配置i3</h2><p>登出账户，选择i3桌面进入</p>\n<p>第一次进入时会让你设置mod键</p>\n<p>按mod+enter打开终端</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> compton用于设置透明，feh设置桌面壁纸，</span><br><span class=\"line\">sudo apt install compton feh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> Albert打开应用</span><br><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt intall albert</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> xfce4-volumed可以使用键盘调节音量</span><br><span class=\"line\">sudo apt install xfce4-volumed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> xfce4-power-manager可以使用键盘fn组合键调节屏幕亮度和键盘背光</span><br><span class=\"line\">sudo apt install xfce4-power-manager</span><br><span class=\"line\"><span class=\"meta\">#</span> 如果没有生效，可以打开xfce4-power-manager-config，在里面有个绑定按键的选项，打钩就好了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> touchpad-indicator可以简单地设置触控板</span><br><span class=\"line\">sudo add-apt-repository ppa:atareao/atareao</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install touchpad-indicator</span><br></pre></td></tr></table></figure>\n<p>打开配置文件<em>~/.config/i3/config</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 设置软件自动启动</span><br><span class=\"line\"><span class=\"meta\">#</span> 每次按mod+shift+r刷新就会生效</span><br><span class=\"line\">exec_always albert</span><br><span class=\"line\">exec_always compton</span><br><span class=\"line\">exec_always --no-startup-id feh --bg-scale /home/tom/Pictures/wallpaper.jpg</span><br><span class=\"line\"><span class=\"meta\">#</span> 只有每次启动桌面的时候才会开启</span><br><span class=\"line\">exec xfce4-volumed</span><br><span class=\"line\">exec xfce4-power-manager</span><br><span class=\"line\">exec touchpad-indicator</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 如果里面有不习惯的快捷键，可以自己设置快捷键</span><br><span class=\"line\"><span class=\"meta\">#</span> 设置自己的快捷键打开软件</span><br><span class=\"line\">bandsym $mod+g exec google-chrome</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 配置完成后重启，使所有设置生效</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux下使用hexo+vscode+markdown编写博客","date":"2019-08-04T10:46:34.000Z","_content":"\n### hexo\n\n#### 安装nodejs和git\n\n*   Windows到[官网](http://nodejs.cn/download/)下载安装包\n*   linux安装nodejs：\n\n```shell\n# linux安装nodejs\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt install nodejs\n\n# npm换淘宝源\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n#### 安装hexo\n\n```shell\nsudo cnpm install -g hexo-cli\n```\n\n#### 配置hexo\n\n```shell\n# 初始化一个目录\nhexo init blog\ncd blog\ncnpm install\n\n# 到hexo主题网站选择一个喜欢的主题，我这里选的是aircloud，把主题clone到themes文件夹\ngit clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud\n```\n\n*   配置_config.yaml可以参考以下设置\n\n[官方Demo](https://github.com/aircloud/hexo-aircloud-blog/blob/master/_config.yml)\n\n在文件最后设置需要同步的仓库，可以设置多个：\n```yml\ndeploy:\n    type: git\n    repo:\n        github: your github repo url\n        gitee: your gitee repo url\n        coding: your conding repo url\n```\n\n* 其他功能的配置\n\n请参考[官方文档](https://github.com/aircloud/hexo-theme-aircloud)\n\n#### 使用hexo\n\n```shell\n# 新建文章\nhexo new filename\t# 它会在source/_posts文件夹创建一个新的markdown文件，在这里面写文章就好了\n\n# 清空缓存，每次生成前最好执行一下\nhexo clean\n\n# 生成静态文件\nhexo g\n\n# 启动本地服务器，每次发布前可以在本地看一下效果\nhexo s\n\n# 发布到远程仓库前，需要安装以下插件\ncnpm install hexo-deployer-git --save\n\n# 发布到远程仓库\nhexo d\n```\n\n#### 设置github\n\n*   注册github账号\n*   创建一个username.github.io的仓库\n*   创建sshkey\n\n```shell\nssh-keygen -t rsa -C 'your email'\n# 创建好后到家目录下的.ssh目录找到id_rsa.pub复制里面的公钥，然后到github里面添加sshkey，就可以不需要密码上传了\n```\n\n*   在github设置里添加自己的sshkey\n*   绑定自己的域名\n\n发布好之后就可以通过*https://username.github.io*访问了，但是很多人希望绑定自己的域名，到本地的blog/source文件夹下创建CNAME文件，里面写上需要绑定的域名。发布一下，然后到域名服务商设置CNAME，就可以使用自己的域名访问了。\n\n#### 设置gitee\n\n*   注册gitee账号\n*   创建一个和自己名字相同的仓库\n*   发布后，进入仓库，点击服务-pages就可以设置好博客了\n* gitee和github有这样几个区别\n  * gitee访问速度快，github比较慢\n  * gitee每次发布都需要到pages页面下更新，github不需要\n  * gitee不能绑定自己的域名，github可以\n* gitee有一个gitee pages Pro可以解决它的所有问题，但是99/年\n\n#### 设置coding\n\n最近发现了一个代码托管网站[coding](https://coding.net/)，它用来做博客比上面两个都要合适，因为它有自动发布，在国内访问速度比较快，可以绑定自己的域名（无需备案），并且完全免费。\n\n用法和上面两个完全相同，创建仓库后进入仓库，点击持续部署-静态网站，就可以设置好博客了。\n\n> 这三个代码托管网站，我推荐在github和coding上都部署一个，防止其中一个突然挂了，gitee那个太麻烦了，就不考虑了。\n\n#### 博客文件的备份\n\n我们要居安思危，为了防止哪天我们的电脑直接挂了，然后带走我们所有的博客，所以我们要备份我们的hexo文件夹。上传到远程仓库的那些只是渲染完成之后的网页，并不是我们编写的markdown文件。如果你使用的是Windows系统，我推荐使用坚果云进行同步，直接把整个文件夹同步就好了。当然，有些文件夹是不用同步的，坚果云可以设置忽略文件夹，不用同步的文件夹有public和.deploy_git. 但是我使用的是Linux，而Linux版的坚果云不可以设置忽略文件夹，所以我就直接使用git进行备份了。\n\n### markdown\n\nmarkdown是个好东西，Linux上优秀的markdown编辑器也不少，比如typora就有Linux版本的，但是在我的电脑上好像有点bug，无法右键打开文件，所以我就选择了vscode。\n我在vscode上安装的插件主要有:\n* Markdown All in One(集成了markdown的一些功能)\n* Markdown Preview Enhanced(预览markdown文件)\n* Paste Image(自定义粘贴图片的链接的)\n* One Dark Pro(主题，好看)\n* Typewriter Scroll Mode(当你打字的时候，自动向上滚动，保证你的光标在屏幕正中央)\n* Power Mode(打字的时候有特效,好看)\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/demo-presets-particles.gif)\n\n编写markdown文件最麻烦的还是图片的插入，最好的解决方案就是图床，Windows下有一款很好用的图床软件叫Picgo，在Linux下也有，但是里面提供的图床真正稳定免费的只有github图床，但是github图床访问又太慢了，所以我就放弃了使用Picgo。\n\n其实只要是可以使用git的代码托管网站都可以作为我们的图床，它们的图片产生的外链前面都是一样的，只有文件名不同，我们只需要使用*Paste Image*插件将图片保存到电脑里的同一个目录，然后设置好图片链接的格式，最后将目录里的图片全都push到远程仓库就可以访问了。\n\n这样的好处是本地也会保存有一份图片副本,如果你的远程仓库挂了,图片也不会丢失,你可以寻找其他的替代方案,到时候批量把链接改掉就可以直接访问了.\n\n#### Paste Image 设置\n\n先说Paste Image的设置，点击vscode左下角的小齿轮,选择设置-扩展-Paste Image Configuration, 需要更改的只有两项:\n* Paste Image: Insert Pattern(粘贴的链接格式,your_url的获取方法见本地仓库设置)\n    \\${imageSyntaxPrefix}your_url\\${imageFileName}\\${imageSyntaxSuffix}\n* Paste Image: Path(图片在本地保存的绝对路径)\n\n这样你每次复制图片之后,使用ctrl+alt+v粘贴到vscode的时候,图片将自动保存到你设置的文件夹里,链接格式也已经帮你转换好了.\n\n#### git设置\n\n这时候图片还在本地文件夹保存着,但是链接是远程仓库的链接,还是访问不了图片的,现在就是要把图片文件夹同步到远程仓库.\n\n这里远程仓库我使用的是国内的coding,本来想用gitee的,但是gitee的访问好像有点问题,所以只好用coding了.我在使用gitee的时候,本地的预览无法显示出图片,但是直接将链接粘贴到浏览器是可以访问的,将文章发布到博客之后,我在gitee和github都部署了博客,结果gitee的无法显示出图片,github的可以,Interesting!\n\n##### 远程仓库设置\n\n1. 在coding注册登录\n2. 在coding创建一个公开的仓库\n3. 将sshkey公钥添加到coding设置里\n4. 复制仓库的链接备用\n\n##### 本地仓库设置\n\n1. 到上面Paste Image里面设置的文件夹路径下打开终端,执行以下命令.\n```shell\n# 初始化仓库\ngit init\n\n# 与远程仓库关联\ngit remote add origin your-repo-url(这就是上面复制的仓库链接)\n\n# 拉取远程仓库的内容\ngit pull origin master\n\n# 在文件夹放一个测试图片,将本地仓库的内容推送到远程仓库并绑定\ngit push --set-upstream origin master\n\n# 以后每次上传时候的三部曲\ngit add .\ngit commit -m 'update'\ngit push\n```\n\n现在图片已经上传到远程仓库了,现在到远程仓库点击那张图片,点击右上角的原始数据,这个时候浏览器上地址栏的链接就是这张图片的外链了,这个链接除了文件名之外的部分就是上面要设置的*Paste Image: Insert Pattern(粘贴的链接格式)*中的*your_url*的部分.\n\n##### 自动上传脚本\n\n到现在为止,在markdown中添加图片的步骤就是:\n1. 复制图片\n2. 使用ctrl+alt+v粘贴链接到vscode\n3. 使用上传三部曲,上传图片\n\n但是每次都要打开终端,进入那个目录,执行三条命令进行上传,实在是太麻烦了,所以我自己又写了一个脚本,自动上传图片.我使用的是Python,需要依赖gitpython库.\n\n```python\n#! /usr/bin/python3\n\nimport git\n\npushPath = \"你的图片文件夹的绝对路径\"\n\nrepo = git.Repo(pushPath)\norigin = repo.remote(name=\"origin\")\n\ndef autoPush():\n    repo.git.add(\".\")\n    repo.git.commit(m=\"update\")\n    origin.push()\n\nif __name__ == \"__main__\":\n    autoPush()\n```\n\n授予此脚本执行权限,然后把它绑定到一个快捷键,然后每次就可以直接按一下快捷键自动上传了.","source":"_posts/Linux下使用hexo-vscode-markdown编写博客.md","raw":"---\ntitle: Linux下使用hexo+vscode+markdown编写博客\ndate: 2019-08-04 18:46:34\ntags: linux\n---\n\n### hexo\n\n#### 安装nodejs和git\n\n*   Windows到[官网](http://nodejs.cn/download/)下载安装包\n*   linux安装nodejs：\n\n```shell\n# linux安装nodejs\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt install nodejs\n\n# npm换淘宝源\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n#### 安装hexo\n\n```shell\nsudo cnpm install -g hexo-cli\n```\n\n#### 配置hexo\n\n```shell\n# 初始化一个目录\nhexo init blog\ncd blog\ncnpm install\n\n# 到hexo主题网站选择一个喜欢的主题，我这里选的是aircloud，把主题clone到themes文件夹\ngit clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud\n```\n\n*   配置_config.yaml可以参考以下设置\n\n[官方Demo](https://github.com/aircloud/hexo-aircloud-blog/blob/master/_config.yml)\n\n在文件最后设置需要同步的仓库，可以设置多个：\n```yml\ndeploy:\n    type: git\n    repo:\n        github: your github repo url\n        gitee: your gitee repo url\n        coding: your conding repo url\n```\n\n* 其他功能的配置\n\n请参考[官方文档](https://github.com/aircloud/hexo-theme-aircloud)\n\n#### 使用hexo\n\n```shell\n# 新建文章\nhexo new filename\t# 它会在source/_posts文件夹创建一个新的markdown文件，在这里面写文章就好了\n\n# 清空缓存，每次生成前最好执行一下\nhexo clean\n\n# 生成静态文件\nhexo g\n\n# 启动本地服务器，每次发布前可以在本地看一下效果\nhexo s\n\n# 发布到远程仓库前，需要安装以下插件\ncnpm install hexo-deployer-git --save\n\n# 发布到远程仓库\nhexo d\n```\n\n#### 设置github\n\n*   注册github账号\n*   创建一个username.github.io的仓库\n*   创建sshkey\n\n```shell\nssh-keygen -t rsa -C 'your email'\n# 创建好后到家目录下的.ssh目录找到id_rsa.pub复制里面的公钥，然后到github里面添加sshkey，就可以不需要密码上传了\n```\n\n*   在github设置里添加自己的sshkey\n*   绑定自己的域名\n\n发布好之后就可以通过*https://username.github.io*访问了，但是很多人希望绑定自己的域名，到本地的blog/source文件夹下创建CNAME文件，里面写上需要绑定的域名。发布一下，然后到域名服务商设置CNAME，就可以使用自己的域名访问了。\n\n#### 设置gitee\n\n*   注册gitee账号\n*   创建一个和自己名字相同的仓库\n*   发布后，进入仓库，点击服务-pages就可以设置好博客了\n* gitee和github有这样几个区别\n  * gitee访问速度快，github比较慢\n  * gitee每次发布都需要到pages页面下更新，github不需要\n  * gitee不能绑定自己的域名，github可以\n* gitee有一个gitee pages Pro可以解决它的所有问题，但是99/年\n\n#### 设置coding\n\n最近发现了一个代码托管网站[coding](https://coding.net/)，它用来做博客比上面两个都要合适，因为它有自动发布，在国内访问速度比较快，可以绑定自己的域名（无需备案），并且完全免费。\n\n用法和上面两个完全相同，创建仓库后进入仓库，点击持续部署-静态网站，就可以设置好博客了。\n\n> 这三个代码托管网站，我推荐在github和coding上都部署一个，防止其中一个突然挂了，gitee那个太麻烦了，就不考虑了。\n\n#### 博客文件的备份\n\n我们要居安思危，为了防止哪天我们的电脑直接挂了，然后带走我们所有的博客，所以我们要备份我们的hexo文件夹。上传到远程仓库的那些只是渲染完成之后的网页，并不是我们编写的markdown文件。如果你使用的是Windows系统，我推荐使用坚果云进行同步，直接把整个文件夹同步就好了。当然，有些文件夹是不用同步的，坚果云可以设置忽略文件夹，不用同步的文件夹有public和.deploy_git. 但是我使用的是Linux，而Linux版的坚果云不可以设置忽略文件夹，所以我就直接使用git进行备份了。\n\n### markdown\n\nmarkdown是个好东西，Linux上优秀的markdown编辑器也不少，比如typora就有Linux版本的，但是在我的电脑上好像有点bug，无法右键打开文件，所以我就选择了vscode。\n我在vscode上安装的插件主要有:\n* Markdown All in One(集成了markdown的一些功能)\n* Markdown Preview Enhanced(预览markdown文件)\n* Paste Image(自定义粘贴图片的链接的)\n* One Dark Pro(主题，好看)\n* Typewriter Scroll Mode(当你打字的时候，自动向上滚动，保证你的光标在屏幕正中央)\n* Power Mode(打字的时候有特效,好看)\n\n![](https://yaozhijin.coding.net/p/img/git/raw/master/demo-presets-particles.gif)\n\n编写markdown文件最麻烦的还是图片的插入，最好的解决方案就是图床，Windows下有一款很好用的图床软件叫Picgo，在Linux下也有，但是里面提供的图床真正稳定免费的只有github图床，但是github图床访问又太慢了，所以我就放弃了使用Picgo。\n\n其实只要是可以使用git的代码托管网站都可以作为我们的图床，它们的图片产生的外链前面都是一样的，只有文件名不同，我们只需要使用*Paste Image*插件将图片保存到电脑里的同一个目录，然后设置好图片链接的格式，最后将目录里的图片全都push到远程仓库就可以访问了。\n\n这样的好处是本地也会保存有一份图片副本,如果你的远程仓库挂了,图片也不会丢失,你可以寻找其他的替代方案,到时候批量把链接改掉就可以直接访问了.\n\n#### Paste Image 设置\n\n先说Paste Image的设置，点击vscode左下角的小齿轮,选择设置-扩展-Paste Image Configuration, 需要更改的只有两项:\n* Paste Image: Insert Pattern(粘贴的链接格式,your_url的获取方法见本地仓库设置)\n    \\${imageSyntaxPrefix}your_url\\${imageFileName}\\${imageSyntaxSuffix}\n* Paste Image: Path(图片在本地保存的绝对路径)\n\n这样你每次复制图片之后,使用ctrl+alt+v粘贴到vscode的时候,图片将自动保存到你设置的文件夹里,链接格式也已经帮你转换好了.\n\n#### git设置\n\n这时候图片还在本地文件夹保存着,但是链接是远程仓库的链接,还是访问不了图片的,现在就是要把图片文件夹同步到远程仓库.\n\n这里远程仓库我使用的是国内的coding,本来想用gitee的,但是gitee的访问好像有点问题,所以只好用coding了.我在使用gitee的时候,本地的预览无法显示出图片,但是直接将链接粘贴到浏览器是可以访问的,将文章发布到博客之后,我在gitee和github都部署了博客,结果gitee的无法显示出图片,github的可以,Interesting!\n\n##### 远程仓库设置\n\n1. 在coding注册登录\n2. 在coding创建一个公开的仓库\n3. 将sshkey公钥添加到coding设置里\n4. 复制仓库的链接备用\n\n##### 本地仓库设置\n\n1. 到上面Paste Image里面设置的文件夹路径下打开终端,执行以下命令.\n```shell\n# 初始化仓库\ngit init\n\n# 与远程仓库关联\ngit remote add origin your-repo-url(这就是上面复制的仓库链接)\n\n# 拉取远程仓库的内容\ngit pull origin master\n\n# 在文件夹放一个测试图片,将本地仓库的内容推送到远程仓库并绑定\ngit push --set-upstream origin master\n\n# 以后每次上传时候的三部曲\ngit add .\ngit commit -m 'update'\ngit push\n```\n\n现在图片已经上传到远程仓库了,现在到远程仓库点击那张图片,点击右上角的原始数据,这个时候浏览器上地址栏的链接就是这张图片的外链了,这个链接除了文件名之外的部分就是上面要设置的*Paste Image: Insert Pattern(粘贴的链接格式)*中的*your_url*的部分.\n\n##### 自动上传脚本\n\n到现在为止,在markdown中添加图片的步骤就是:\n1. 复制图片\n2. 使用ctrl+alt+v粘贴链接到vscode\n3. 使用上传三部曲,上传图片\n\n但是每次都要打开终端,进入那个目录,执行三条命令进行上传,实在是太麻烦了,所以我自己又写了一个脚本,自动上传图片.我使用的是Python,需要依赖gitpython库.\n\n```python\n#! /usr/bin/python3\n\nimport git\n\npushPath = \"你的图片文件夹的绝对路径\"\n\nrepo = git.Repo(pushPath)\norigin = repo.remote(name=\"origin\")\n\ndef autoPush():\n    repo.git.add(\".\")\n    repo.git.commit(m=\"update\")\n    origin.push()\n\nif __name__ == \"__main__\":\n    autoPush()\n```\n\n授予此脚本执行权限,然后把它绑定到一个快捷键,然后每次就可以直接按一下快捷键自动上传了.","slug":"Linux下使用hexo-vscode-markdown编写博客","published":1,"updated":"2019-08-08T11:54:55.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjz2mk7se00057t3qxb7z7bwh","content":"<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><h4 id=\"安装nodejs和git\"><a href=\"#安装nodejs和git\" class=\"headerlink\" title=\"安装nodejs和git\"></a>安装nodejs和git</h4><ul>\n<li>Windows到<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">官网</a>下载安装包</li>\n<li>linux安装nodejs：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> linux安装nodejs</span><br><span class=\"line\">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> npm换淘宝源</span><br><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 初始化一个目录</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">cnpm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 到hexo主题网站选择一个喜欢的主题，我这里选的是aircloud，把主题clone到themes文件夹</span><br><span class=\"line\">git clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置_config.yaml可以参考以下设置</li>\n</ul>\n<p><a href=\"https://github.com/aircloud/hexo-aircloud-blog/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">官方Demo</a></p>\n<p>在文件最后设置需要同步的仓库，可以设置多个：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span></span><br><span class=\"line\"><span class=\"attr\">        github:</span> <span class=\"string\">your</span> <span class=\"string\">github</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br><span class=\"line\"><span class=\"attr\">        gitee:</span> <span class=\"string\">your</span> <span class=\"string\">gitee</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br><span class=\"line\"><span class=\"attr\">        coding:</span> <span class=\"string\">your</span> <span class=\"string\">conding</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>其他功能的配置</li>\n</ul>\n<p>请参考<a href=\"https://github.com/aircloud/hexo-theme-aircloud\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"使用hexo\"><a href=\"#使用hexo\" class=\"headerlink\" title=\"使用hexo\"></a>使用hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建文章</span><br><span class=\"line\">hexo new filename\t# 它会在source/_posts文件夹创建一个新的markdown文件，在这里面写文章就好了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 清空缓存，每次生成前最好执行一下</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 生成静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动本地服务器，每次发布前可以在本地看一下效果</span><br><span class=\"line\">hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 发布到远程仓库前，需要安装以下插件</span><br><span class=\"line\">cnpm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 发布到远程仓库</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置github\"><a href=\"#设置github\" class=\"headerlink\" title=\"设置github\"></a>设置github</h4><ul>\n<li>注册github账号</li>\n<li>创建一个username.github.io的仓库</li>\n<li>创建sshkey</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C 'your email'</span><br><span class=\"line\"><span class=\"meta\">#</span> 创建好后到家目录下的.ssh目录找到id_rsa.pub复制里面的公钥，然后到github里面添加sshkey，就可以不需要密码上传了</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在github设置里添加自己的sshkey</li>\n<li>绑定自己的域名</li>\n</ul>\n<p>发布好之后就可以通过<em><a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a></em>访问了，但是很多人希望绑定自己的域名，到本地的blog/source文件夹下创建CNAME文件，里面写上需要绑定的域名。发布一下，然后到域名服务商设置CNAME，就可以使用自己的域名访问了。</p>\n<h4 id=\"设置gitee\"><a href=\"#设置gitee\" class=\"headerlink\" title=\"设置gitee\"></a>设置gitee</h4><ul>\n<li>注册gitee账号</li>\n<li>创建一个和自己名字相同的仓库</li>\n<li>发布后，进入仓库，点击服务-pages就可以设置好博客了</li>\n<li>gitee和github有这样几个区别<ul>\n<li>gitee访问速度快，github比较慢</li>\n<li>gitee每次发布都需要到pages页面下更新，github不需要</li>\n<li>gitee不能绑定自己的域名，github可以</li>\n</ul>\n</li>\n<li>gitee有一个gitee pages Pro可以解决它的所有问题，但是99/年</li>\n</ul>\n<h4 id=\"设置coding\"><a href=\"#设置coding\" class=\"headerlink\" title=\"设置coding\"></a>设置coding</h4><p>最近发现了一个代码托管网站<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a>，它用来做博客比上面两个都要合适，因为它有自动发布，在国内访问速度比较快，可以绑定自己的域名（无需备案），并且完全免费。</p>\n<p>用法和上面两个完全相同，创建仓库后进入仓库，点击持续部署-静态网站，就可以设置好博客了。</p>\n<blockquote>\n<p>这三个代码托管网站，我推荐在github和coding上都部署一个，防止其中一个突然挂了，gitee那个太麻烦了，就不考虑了。</p>\n</blockquote>\n<h4 id=\"博客文件的备份\"><a href=\"#博客文件的备份\" class=\"headerlink\" title=\"博客文件的备份\"></a>博客文件的备份</h4><p>我们要居安思危，为了防止哪天我们的电脑直接挂了，然后带走我们所有的博客，所以我们要备份我们的hexo文件夹。上传到远程仓库的那些只是渲染完成之后的网页，并不是我们编写的markdown文件。如果你使用的是Windows系统，我推荐使用坚果云进行同步，直接把整个文件夹同步就好了。当然，有些文件夹是不用同步的，坚果云可以设置忽略文件夹，不用同步的文件夹有public和.deploy_git. 但是我使用的是Linux，而Linux版的坚果云不可以设置忽略文件夹，所以我就直接使用git进行备份了。</p>\n<h3 id=\"markdown\"><a href=\"#markdown\" class=\"headerlink\" title=\"markdown\"></a>markdown</h3><p>markdown是个好东西，Linux上优秀的markdown编辑器也不少，比如typora就有Linux版本的，但是在我的电脑上好像有点bug，无法右键打开文件，所以我就选择了vscode。<br>我在vscode上安装的插件主要有:</p>\n<ul>\n<li>Markdown All in One(集成了markdown的一些功能)</li>\n<li>Markdown Preview Enhanced(预览markdown文件)</li>\n<li>Paste Image(自定义粘贴图片的链接的)</li>\n<li>One Dark Pro(主题，好看)</li>\n<li>Typewriter Scroll Mode(当你打字的时候，自动向上滚动，保证你的光标在屏幕正中央)</li>\n<li>Power Mode(打字的时候有特效,好看)</li>\n</ul>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/demo-presets-particles.gif\" alt></p>\n<p>编写markdown文件最麻烦的还是图片的插入，最好的解决方案就是图床，Windows下有一款很好用的图床软件叫Picgo，在Linux下也有，但是里面提供的图床真正稳定免费的只有github图床，但是github图床访问又太慢了，所以我就放弃了使用Picgo。</p>\n<p>其实只要是可以使用git的代码托管网站都可以作为我们的图床，它们的图片产生的外链前面都是一样的，只有文件名不同，我们只需要使用<em>Paste Image</em>插件将图片保存到电脑里的同一个目录，然后设置好图片链接的格式，最后将目录里的图片全都push到远程仓库就可以访问了。</p>\n<p>这样的好处是本地也会保存有一份图片副本,如果你的远程仓库挂了,图片也不会丢失,你可以寻找其他的替代方案,到时候批量把链接改掉就可以直接访问了.</p>\n<h4 id=\"Paste-Image-设置\"><a href=\"#Paste-Image-设置\" class=\"headerlink\" title=\"Paste Image 设置\"></a>Paste Image 设置</h4><p>先说Paste Image的设置，点击vscode左下角的小齿轮,选择设置-扩展-Paste Image Configuration, 需要更改的只有两项:</p>\n<ul>\n<li>Paste Image: Insert Pattern(粘贴的链接格式,your_url的获取方法见本地仓库设置)<br>  \\${imageSyntaxPrefix}your_url\\${imageFileName}\\${imageSyntaxSuffix}</li>\n<li>Paste Image: Path(图片在本地保存的绝对路径)</li>\n</ul>\n<p>这样你每次复制图片之后,使用ctrl+alt+v粘贴到vscode的时候,图片将自动保存到你设置的文件夹里,链接格式也已经帮你转换好了.</p>\n<h4 id=\"git设置\"><a href=\"#git设置\" class=\"headerlink\" title=\"git设置\"></a>git设置</h4><p>这时候图片还在本地文件夹保存着,但是链接是远程仓库的链接,还是访问不了图片的,现在就是要把图片文件夹同步到远程仓库.</p>\n<p>这里远程仓库我使用的是国内的coding,本来想用gitee的,但是gitee的访问好像有点问题,所以只好用coding了.我在使用gitee的时候,本地的预览无法显示出图片,但是直接将链接粘贴到浏览器是可以访问的,将文章发布到博客之后,我在gitee和github都部署了博客,结果gitee的无法显示出图片,github的可以,Interesting!</p>\n<h5 id=\"远程仓库设置\"><a href=\"#远程仓库设置\" class=\"headerlink\" title=\"远程仓库设置\"></a>远程仓库设置</h5><ol>\n<li>在coding注册登录</li>\n<li>在coding创建一个公开的仓库</li>\n<li>将sshkey公钥添加到coding设置里</li>\n<li>复制仓库的链接备用</li>\n</ol>\n<h5 id=\"本地仓库设置\"><a href=\"#本地仓库设置\" class=\"headerlink\" title=\"本地仓库设置\"></a>本地仓库设置</h5><ol>\n<li>到上面Paste Image里面设置的文件夹路径下打开终端,执行以下命令.<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 初始化仓库</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 与远程仓库关联</span><br><span class=\"line\">git remote add origin your-repo-url(这就是上面复制的仓库链接)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 拉取远程仓库的内容</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 在文件夹放一个测试图片,将本地仓库的内容推送到远程仓库并绑定</span><br><span class=\"line\">git push --set-upstream origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 以后每次上传时候的三部曲</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'update'</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在图片已经上传到远程仓库了,现在到远程仓库点击那张图片,点击右上角的原始数据,这个时候浏览器上地址栏的链接就是这张图片的外链了,这个链接除了文件名之外的部分就是上面要设置的<em>Paste Image: Insert Pattern(粘贴的链接格式)</em>中的<em>your_url</em>的部分.</p>\n<h5 id=\"自动上传脚本\"><a href=\"#自动上传脚本\" class=\"headerlink\" title=\"自动上传脚本\"></a>自动上传脚本</h5><p>到现在为止,在markdown中添加图片的步骤就是:</p>\n<ol>\n<li>复制图片</li>\n<li>使用ctrl+alt+v粘贴链接到vscode</li>\n<li>使用上传三部曲,上传图片</li>\n</ol>\n<p>但是每次都要打开终端,进入那个目录,执行三条命令进行上传,实在是太麻烦了,所以我自己又写了一个脚本,自动上传图片.我使用的是Python,需要依赖gitpython库.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> git</span><br><span class=\"line\"></span><br><span class=\"line\">pushPath = <span class=\"string\">\"你的图片文件夹的绝对路径\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">repo = git.Repo(pushPath)</span><br><span class=\"line\">origin = repo.remote(name=<span class=\"string\">\"origin\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autoPush</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo.git.add(<span class=\"string\">\".\"</span>)</span><br><span class=\"line\">    repo.git.commit(m=<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\">    origin.push()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    autoPush()</span><br></pre></td></tr></table></figure>\n<p>授予此脚本执行权限,然后把它绑定到一个快捷键,然后每次就可以直接按一下快捷键自动上传了.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><h4 id=\"安装nodejs和git\"><a href=\"#安装nodejs和git\" class=\"headerlink\" title=\"安装nodejs和git\"></a>安装nodejs和git</h4><ul>\n<li>Windows到<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">官网</a>下载安装包</li>\n<li>linux安装nodejs：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> linux安装nodejs</span><br><span class=\"line\">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> npm换淘宝源</span><br><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置hexo\"><a href=\"#配置hexo\" class=\"headerlink\" title=\"配置hexo\"></a>配置hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 初始化一个目录</span><br><span class=\"line\">hexo init blog</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">cnpm install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 到hexo主题网站选择一个喜欢的主题，我这里选的是aircloud，把主题clone到themes文件夹</span><br><span class=\"line\">git clone https://github.com/aircloud/hexo-theme-aircloud.git themes/aircloud</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置_config.yaml可以参考以下设置</li>\n</ul>\n<p><a href=\"https://github.com/aircloud/hexo-aircloud-blog/blob/master/_config.yml\" target=\"_blank\" rel=\"noopener\">官方Demo</a></p>\n<p>在文件最后设置需要同步的仓库，可以设置多个：<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span></span><br><span class=\"line\"><span class=\"attr\">        github:</span> <span class=\"string\">your</span> <span class=\"string\">github</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br><span class=\"line\"><span class=\"attr\">        gitee:</span> <span class=\"string\">your</span> <span class=\"string\">gitee</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br><span class=\"line\"><span class=\"attr\">        coding:</span> <span class=\"string\">your</span> <span class=\"string\">conding</span> <span class=\"string\">repo</span> <span class=\"string\">url</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>其他功能的配置</li>\n</ul>\n<p>请参考<a href=\"https://github.com/aircloud/hexo-theme-aircloud\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h4 id=\"使用hexo\"><a href=\"#使用hexo\" class=\"headerlink\" title=\"使用hexo\"></a>使用hexo</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 新建文章</span><br><span class=\"line\">hexo new filename\t# 它会在source/_posts文件夹创建一个新的markdown文件，在这里面写文章就好了</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 清空缓存，每次生成前最好执行一下</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 生成静态文件</span><br><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 启动本地服务器，每次发布前可以在本地看一下效果</span><br><span class=\"line\">hexo s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 发布到远程仓库前，需要安装以下插件</span><br><span class=\"line\">cnpm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 发布到远程仓库</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置github\"><a href=\"#设置github\" class=\"headerlink\" title=\"设置github\"></a>设置github</h4><ul>\n<li>注册github账号</li>\n<li>创建一个username.github.io的仓库</li>\n<li>创建sshkey</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C 'your email'</span><br><span class=\"line\"><span class=\"meta\">#</span> 创建好后到家目录下的.ssh目录找到id_rsa.pub复制里面的公钥，然后到github里面添加sshkey，就可以不需要密码上传了</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在github设置里添加自己的sshkey</li>\n<li>绑定自己的域名</li>\n</ul>\n<p>发布好之后就可以通过<em><a href=\"https://username.github.io\" target=\"_blank\" rel=\"noopener\">https://username.github.io</a></em>访问了，但是很多人希望绑定自己的域名，到本地的blog/source文件夹下创建CNAME文件，里面写上需要绑定的域名。发布一下，然后到域名服务商设置CNAME，就可以使用自己的域名访问了。</p>\n<h4 id=\"设置gitee\"><a href=\"#设置gitee\" class=\"headerlink\" title=\"设置gitee\"></a>设置gitee</h4><ul>\n<li>注册gitee账号</li>\n<li>创建一个和自己名字相同的仓库</li>\n<li>发布后，进入仓库，点击服务-pages就可以设置好博客了</li>\n<li>gitee和github有这样几个区别<ul>\n<li>gitee访问速度快，github比较慢</li>\n<li>gitee每次发布都需要到pages页面下更新，github不需要</li>\n<li>gitee不能绑定自己的域名，github可以</li>\n</ul>\n</li>\n<li>gitee有一个gitee pages Pro可以解决它的所有问题，但是99/年</li>\n</ul>\n<h4 id=\"设置coding\"><a href=\"#设置coding\" class=\"headerlink\" title=\"设置coding\"></a>设置coding</h4><p>最近发现了一个代码托管网站<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">coding</a>，它用来做博客比上面两个都要合适，因为它有自动发布，在国内访问速度比较快，可以绑定自己的域名（无需备案），并且完全免费。</p>\n<p>用法和上面两个完全相同，创建仓库后进入仓库，点击持续部署-静态网站，就可以设置好博客了。</p>\n<blockquote>\n<p>这三个代码托管网站，我推荐在github和coding上都部署一个，防止其中一个突然挂了，gitee那个太麻烦了，就不考虑了。</p>\n</blockquote>\n<h4 id=\"博客文件的备份\"><a href=\"#博客文件的备份\" class=\"headerlink\" title=\"博客文件的备份\"></a>博客文件的备份</h4><p>我们要居安思危，为了防止哪天我们的电脑直接挂了，然后带走我们所有的博客，所以我们要备份我们的hexo文件夹。上传到远程仓库的那些只是渲染完成之后的网页，并不是我们编写的markdown文件。如果你使用的是Windows系统，我推荐使用坚果云进行同步，直接把整个文件夹同步就好了。当然，有些文件夹是不用同步的，坚果云可以设置忽略文件夹，不用同步的文件夹有public和.deploy_git. 但是我使用的是Linux，而Linux版的坚果云不可以设置忽略文件夹，所以我就直接使用git进行备份了。</p>\n<h3 id=\"markdown\"><a href=\"#markdown\" class=\"headerlink\" title=\"markdown\"></a>markdown</h3><p>markdown是个好东西，Linux上优秀的markdown编辑器也不少，比如typora就有Linux版本的，但是在我的电脑上好像有点bug，无法右键打开文件，所以我就选择了vscode。<br>我在vscode上安装的插件主要有:</p>\n<ul>\n<li>Markdown All in One(集成了markdown的一些功能)</li>\n<li>Markdown Preview Enhanced(预览markdown文件)</li>\n<li>Paste Image(自定义粘贴图片的链接的)</li>\n<li>One Dark Pro(主题，好看)</li>\n<li>Typewriter Scroll Mode(当你打字的时候，自动向上滚动，保证你的光标在屏幕正中央)</li>\n<li>Power Mode(打字的时候有特效,好看)</li>\n</ul>\n<p><img src=\"https://yaozhijin.coding.net/p/img/git/raw/master/demo-presets-particles.gif\" alt></p>\n<p>编写markdown文件最麻烦的还是图片的插入，最好的解决方案就是图床，Windows下有一款很好用的图床软件叫Picgo，在Linux下也有，但是里面提供的图床真正稳定免费的只有github图床，但是github图床访问又太慢了，所以我就放弃了使用Picgo。</p>\n<p>其实只要是可以使用git的代码托管网站都可以作为我们的图床，它们的图片产生的外链前面都是一样的，只有文件名不同，我们只需要使用<em>Paste Image</em>插件将图片保存到电脑里的同一个目录，然后设置好图片链接的格式，最后将目录里的图片全都push到远程仓库就可以访问了。</p>\n<p>这样的好处是本地也会保存有一份图片副本,如果你的远程仓库挂了,图片也不会丢失,你可以寻找其他的替代方案,到时候批量把链接改掉就可以直接访问了.</p>\n<h4 id=\"Paste-Image-设置\"><a href=\"#Paste-Image-设置\" class=\"headerlink\" title=\"Paste Image 设置\"></a>Paste Image 设置</h4><p>先说Paste Image的设置，点击vscode左下角的小齿轮,选择设置-扩展-Paste Image Configuration, 需要更改的只有两项:</p>\n<ul>\n<li>Paste Image: Insert Pattern(粘贴的链接格式,your_url的获取方法见本地仓库设置)<br>  \\${imageSyntaxPrefix}your_url\\${imageFileName}\\${imageSyntaxSuffix}</li>\n<li>Paste Image: Path(图片在本地保存的绝对路径)</li>\n</ul>\n<p>这样你每次复制图片之后,使用ctrl+alt+v粘贴到vscode的时候,图片将自动保存到你设置的文件夹里,链接格式也已经帮你转换好了.</p>\n<h4 id=\"git设置\"><a href=\"#git设置\" class=\"headerlink\" title=\"git设置\"></a>git设置</h4><p>这时候图片还在本地文件夹保存着,但是链接是远程仓库的链接,还是访问不了图片的,现在就是要把图片文件夹同步到远程仓库.</p>\n<p>这里远程仓库我使用的是国内的coding,本来想用gitee的,但是gitee的访问好像有点问题,所以只好用coding了.我在使用gitee的时候,本地的预览无法显示出图片,但是直接将链接粘贴到浏览器是可以访问的,将文章发布到博客之后,我在gitee和github都部署了博客,结果gitee的无法显示出图片,github的可以,Interesting!</p>\n<h5 id=\"远程仓库设置\"><a href=\"#远程仓库设置\" class=\"headerlink\" title=\"远程仓库设置\"></a>远程仓库设置</h5><ol>\n<li>在coding注册登录</li>\n<li>在coding创建一个公开的仓库</li>\n<li>将sshkey公钥添加到coding设置里</li>\n<li>复制仓库的链接备用</li>\n</ol>\n<h5 id=\"本地仓库设置\"><a href=\"#本地仓库设置\" class=\"headerlink\" title=\"本地仓库设置\"></a>本地仓库设置</h5><ol>\n<li>到上面Paste Image里面设置的文件夹路径下打开终端,执行以下命令.<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> 初始化仓库</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 与远程仓库关联</span><br><span class=\"line\">git remote add origin your-repo-url(这就是上面复制的仓库链接)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 拉取远程仓库的内容</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 在文件夹放一个测试图片,将本地仓库的内容推送到远程仓库并绑定</span><br><span class=\"line\">git push --set-upstream origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span> 以后每次上传时候的三部曲</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m 'update'</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>现在图片已经上传到远程仓库了,现在到远程仓库点击那张图片,点击右上角的原始数据,这个时候浏览器上地址栏的链接就是这张图片的外链了,这个链接除了文件名之外的部分就是上面要设置的<em>Paste Image: Insert Pattern(粘贴的链接格式)</em>中的<em>your_url</em>的部分.</p>\n<h5 id=\"自动上传脚本\"><a href=\"#自动上传脚本\" class=\"headerlink\" title=\"自动上传脚本\"></a>自动上传脚本</h5><p>到现在为止,在markdown中添加图片的步骤就是:</p>\n<ol>\n<li>复制图片</li>\n<li>使用ctrl+alt+v粘贴链接到vscode</li>\n<li>使用上传三部曲,上传图片</li>\n</ol>\n<p>但是每次都要打开终端,进入那个目录,执行三条命令进行上传,实在是太麻烦了,所以我自己又写了一个脚本,自动上传图片.我使用的是Python,需要依赖gitpython库.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#! /usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> git</span><br><span class=\"line\"></span><br><span class=\"line\">pushPath = <span class=\"string\">\"你的图片文件夹的绝对路径\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">repo = git.Repo(pushPath)</span><br><span class=\"line\">origin = repo.remote(name=<span class=\"string\">\"origin\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autoPush</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo.git.add(<span class=\"string\">\".\"</span>)</span><br><span class=\"line\">    repo.git.commit(m=<span class=\"string\">\"update\"</span>)</span><br><span class=\"line\">    origin.push()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    autoPush()</span><br></pre></td></tr></table></figure>\n<p>授予此脚本执行权限,然后把它绑定到一个快捷键,然后每次就可以直接按一下快捷键自动上传了.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjz2mk7s600007t3qkooarrme","tag_id":"cjz2mk7sc00037t3q297hi9q2","_id":"cjz2mk7sg00077t3qup5buk7e"},{"post_id":"cjz2mk7sb00027t3qndqbbvfc","tag_id":"cjz2mk7sf00067t3qw36yb4is","_id":"cjz2mk7sh00097t3q40rig91j"},{"post_id":"cjz2mk7sd00047t3q1ixntugj","tag_id":"cjz2mk7sf00067t3qw36yb4is","_id":"cjz2mk7si000b7t3qgsdeswiu"},{"post_id":"cjz2mk7se00057t3qxb7z7bwh","tag_id":"cjz2mk7sf00067t3qw36yb4is","_id":"cjz2mk7si000c7t3q2ts44r2q"}],"Tag":[{"name":"电子","_id":"cjz2mk7sc00037t3q297hi9q2"},{"name":"linux","_id":"cjz2mk7sf00067t3qw36yb4is"}]}}